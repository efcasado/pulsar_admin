# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PulsarAdmin.Api.Tenants do
  @moduledoc """
  API calls for all endpoints tagged `Tenants`.
  """

  alias PulsarAdmin.Connection
  import PulsarAdmin.RequestBuilder

  @doc """
  Create a new tenant.
  This operation requires Pulsar super-user privileges.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): The tenant name
  - `opts` (keyword): Optional parameters
    - `:body` (TenantInfo): TenantInfo

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenants_base_create_tenant(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def tenants_base_create_tenant(connection, tenant, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/tenants/#{tenant}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {403, false},
      {409, false},
      {412, false}
    ])
  end

  @doc """
  Delete a tenant and all namespaces and topics under it.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): The tenant name
  - `opts` (keyword): Optional parameters
    - `:force` (boolean()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenants_base_delete_tenant(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def tenants_base_delete_tenant(connection, tenant, opts \\ []) do
    optional_params = %{
      :force => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/tenants/#{tenant}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {403, false},
      {404, false},
      {405, false},
      {409, false}
    ])
  end

  @doc """
  Get the admin configuration for a given tenant.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): The tenant name
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PulsarAdmin.Model.TenantInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenants_base_get_tenant_admin(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.TenantInfo.t} | {:error, Tesla.Env.t}
  def tenants_base_get_tenant_admin(connection, tenant, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/tenants/#{tenant}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.TenantInfo},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get the list of existing tenants.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%String{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenants_base_get_tenants(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [String.t]} | {:error, Tesla.Env.t}
  def tenants_base_get_tenants(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/tenants")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Update the admins for a tenant.
  This operation requires Pulsar super-user privileges.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): The tenant name
  - `opts` (keyword): Optional parameters
    - `:body` (TenantInfo): TenantInfo

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenants_base_update_tenant(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def tenants_base_update_tenant(connection, tenant, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/tenants/#{tenant}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {403, false},
      {404, false},
      {409, false},
      {412, false}
    ])
  end
end
