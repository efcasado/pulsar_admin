# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PulsarAdmin.Api.Schemas do
  @moduledoc """
  API calls for all endpoints tagged `Schemas`.
  """

  alias PulsarAdmin.Connection
  import PulsarAdmin.RequestBuilder

  @doc """
  test the schema compatibility

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): 
  - `namespace` (String.t): 
  - `topic` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:authoritative` (boolean()): 
    - `:body` (PostSchemaPayload): A JSON value presenting a schema payload. An example of the expected schema can be found down here.

  ### Returns

  - `{:ok, PulsarAdmin.Model.IsCompatibilityResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schemas_tenant_namespace_topic_compatibility_post(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.IsCompatibilityResponse.t} | {:error, Tesla.Env.t}
  def schemas_tenant_namespace_topic_compatibility_post(connection, tenant, namespace, topic, opts \\ []) do
    optional_params = %{
      :authoritative => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/schemas/#{tenant}/#{namespace}/#{topic}/compatibility")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.IsCompatibilityResponse},
      {307, false},
      {401, false},
      {403, false},
      {404, false},
      {412, false},
      {500, false}
    ])
  end

  @doc """
  Delete all versions schema of a topic

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): 
  - `namespace` (String.t): 
  - `topic` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:authoritative` (boolean()): 
    - `:force` (boolean()): 

  ### Returns

  - `{:ok, PulsarAdmin.Model.DeleteSchemaResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schemas_tenant_namespace_topic_schema_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.DeleteSchemaResponse.t} | {:error, Tesla.Env.t}
  def schemas_tenant_namespace_topic_schema_delete(connection, tenant, namespace, topic, opts \\ []) do
    optional_params = %{
      :authoritative => :query,
      :force => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/schemas/#{tenant}/#{namespace}/#{topic}/schema")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.DeleteSchemaResponse},
      {307, false},
      {401, false},
      {403, false},
      {404, false},
      {412, false},
      {500, false}
    ])
  end

  @doc """
  Get the schema of a topic

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): 
  - `namespace` (String.t): 
  - `topic` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:authoritative` (boolean()): 

  ### Returns

  - `{:ok, PulsarAdmin.Model.GetSchemaResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schemas_tenant_namespace_topic_schema_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.GetSchemaResponse.t} | {:error, Tesla.Env.t}
  def schemas_tenant_namespace_topic_schema_get(connection, tenant, namespace, topic, opts \\ []) do
    optional_params = %{
      :authoritative => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/schemas/#{tenant}/#{namespace}/#{topic}/schema")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.GetSchemaResponse},
      {307, false},
      {401, false},
      {403, false},
      {404, false},
      {412, false},
      {500, false}
    ])
  end

  @doc """
  Update the schema of a topic

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): 
  - `namespace` (String.t): 
  - `topic` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:authoritative` (boolean()): 
    - `:body` (PostSchemaPayload): A JSON value presenting a schema payload. An example of the expected schema can be found down here.

  ### Returns

  - `{:ok, PulsarAdmin.Model.PostSchemaResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schemas_tenant_namespace_topic_schema_post(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.PostSchemaResponse.t} | {:error, Tesla.Env.t}
  def schemas_tenant_namespace_topic_schema_post(connection, tenant, namespace, topic, opts \\ []) do
    optional_params = %{
      :authoritative => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/schemas/#{tenant}/#{namespace}/#{topic}/schema")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.PostSchemaResponse},
      {307, false},
      {401, false},
      {403, false},
      {404, false},
      {409, false},
      {412, false},
      {422, false},
      {500, false}
    ])
  end

  @doc """
  Get the schema of a topic at a given version

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): 
  - `namespace` (String.t): 
  - `topic` (String.t): 
  - `version` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:authoritative` (boolean()): 

  ### Returns

  - `{:ok, PulsarAdmin.Model.GetSchemaResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schemas_tenant_namespace_topic_schema_version_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.GetSchemaResponse.t} | {:error, Tesla.Env.t}
  def schemas_tenant_namespace_topic_schema_version_get(connection, tenant, namespace, topic, version, opts \\ []) do
    optional_params = %{
      :authoritative => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/schemas/#{tenant}/#{namespace}/#{topic}/schema/#{version}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.GetSchemaResponse},
      {307, false},
      {401, false},
      {403, false},
      {404, false},
      {412, false},
      {500, false}
    ])
  end

  @doc """
  Get the all schemas of a topic

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): 
  - `namespace` (String.t): 
  - `topic` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:authoritative` (boolean()): 

  ### Returns

  - `{:ok, PulsarAdmin.Model.GetAllVersionsSchemaResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schemas_tenant_namespace_topic_schemas_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.GetAllVersionsSchemaResponse.t} | {:error, Tesla.Env.t}
  def schemas_tenant_namespace_topic_schemas_get(connection, tenant, namespace, topic, opts \\ []) do
    optional_params = %{
      :authoritative => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/schemas/#{tenant}/#{namespace}/#{topic}/schemas")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.GetAllVersionsSchemaResponse},
      {307, false},
      {401, false},
      {403, false},
      {404, false},
      {412, false},
      {500, false}
    ])
  end

  @doc """
  get the version of the schema

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): 
  - `namespace` (String.t): 
  - `topic` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:authoritative` (boolean()): 
    - `:body` (PostSchemaPayload): A JSON value presenting a schema payload. An example of the expected schema can be found down here.

  ### Returns

  - `{:ok, PulsarAdmin.Model.LongSchemaVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec schemas_tenant_namespace_topic_version_post(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.LongSchemaVersion.t} | {:error, Tesla.Env.t}
  def schemas_tenant_namespace_topic_version_post(connection, tenant, namespace, topic, opts \\ []) do
    optional_params = %{
      :authoritative => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/schemas/#{tenant}/#{namespace}/#{topic}/version")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.LongSchemaVersion},
      {307, false},
      {401, false},
      {403, false},
      {404, false},
      {412, false},
      {422, false},
      {500, false}
    ])
  end
end
