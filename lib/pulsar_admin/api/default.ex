# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PulsarAdmin.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias PulsarAdmin.Connection
  import PulsarAdmin.RequestBuilder

  @doc """
  Drains this worker, i.e., moves its work-assignments to other workers

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_drain(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def worker_drain(connection, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/worker/drain")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, false},
      {403, false},
      {408, false},
      {409, false},
      {503, false}
    ])
  end

  @doc """
  Drains the specified worker, i.e., moves its work-assignments to other workers

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:workerId` (String.t): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_drain_at_leader(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def worker_drain_at_leader(connection, opts \\ []) do
    optional_params = %{
      :workerId => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/worker/leader/drain")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, false},
      {403, false},
      {408, false},
      {409, false},
      {503, false}
    ])
  end

  @doc """
  Fetches information about which Pulsar Functions are assigned to which Pulsar clusters
  Returns a nested map structure which Swagger does not fully support for display.Structure: Map<String, Set<String>>. Please refer to this structure for details.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_get_assignments(Tesla.Env.client, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def worker_get_assignments(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/worker/assignments")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {403, false},
      {503, false}
    ])
  end

  @doc """
  Fetches information about the Pulsar cluster running Pulsar Functions

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%WorkerInfo{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_get_cluster(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [PulsarAdmin.Model.WorkerInfo.t]} | {:error, Tesla.Env.t}
  def worker_get_cluster(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/worker/cluster")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.WorkerInfo},
      {403, false},
      {503, false}
    ])
  end

  @doc """
  Fetches info about the leader node of the Pulsar cluster running Pulsar Functions

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PulsarAdmin.Model.WorkerInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_get_cluster_leader(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.WorkerInfo.t} | {:error, Tesla.Env.t}
  def worker_get_cluster_leader(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/worker/cluster/leader")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.WorkerInfo},
      {403, false},
      {503, false}
    ])
  end

  @doc """
  Fetches a list of supported Pulsar IO connectors currently running in cluster mode

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%ConnectorDefinition{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_get_connectors_list(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [PulsarAdmin.Model.ConnectorDefinition.t]} | {:error, Tesla.Env.t}
  def worker_get_connectors_list(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/worker/connectors")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.ConnectorDefinition},
      {400, false},
      {403, false},
      {408, false}
    ])
  end

  @doc """
  Get the status of any ongoing drain operation at this worker

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PulsarAdmin.Model.LongRunningProcessStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_get_drain_status(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.LongRunningProcessStatus.t} | {:error, Tesla.Env.t}
  def worker_get_drain_status(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/worker/drain")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.LongRunningProcessStatus},
      {403, false},
      {503, false}
    ])
  end

  @doc """
  Get the status of any ongoing drain operation at the specified worker

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:workerId` (String.t): 

  ### Returns

  - `{:ok, PulsarAdmin.Model.LongRunningProcessStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_get_drain_status_from_leader(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.LongRunningProcessStatus.t} | {:error, Tesla.Env.t}
  def worker_get_drain_status_from_leader(connection, opts \\ []) do
    optional_params = %{
      :workerId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/worker/leader/drain")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.LongRunningProcessStatus},
      {403, false},
      {503, false}
    ])
  end

  @doc """
  Checks if this node is the leader and is ready to service requests

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, boolean()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_is_leader_ready(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, boolean()} | {:error, Tesla.Env.t}
  def worker_is_leader_ready(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/worker/cluster/leader/ready")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {503, false}
    ])
  end

  @doc """
  Triggers a rebalance of functions to workers

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_rebalance(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def worker_rebalance(connection, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/worker/rebalance")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, false},
      {403, false},
      {408, false}
    ])
  end

  @doc """
  Gets the metrics for Monitoring
  Request should be executed by Monitoring agent on each worker to fetch the worker-metrics

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Metrics{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_stats_get_metrics(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [PulsarAdmin.Model.Metrics.t]} | {:error, Tesla.Env.t}
  def worker_stats_get_metrics(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/worker-stats/metrics")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.Metrics},
      {401, false},
      {503, false}
    ])
  end

  @doc """
  Get metrics for all functions owned by worker
  Requested should be executed by Monitoring agent on each worker to fetch the metrics

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%WorkerFunctionInstanceStats{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec worker_stats_get_stats(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [PulsarAdmin.Model.WorkerFunctionInstanceStats.t]} | {:error, Tesla.Env.t}
  def worker_stats_get_stats(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/worker-stats/functionsmetrics")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.WorkerFunctionInstanceStats},
      {401, false},
      {503, false}
    ])
  end
end
