# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PulsarAdmin.Api.Brokers do
  @moduledoc """
  API calls for all endpoints tagged `Brokers`.
  """

  alias PulsarAdmin.Connection
  import PulsarAdmin.RequestBuilder

  @doc """
  An REST endpoint to trigger backlogQuotaCheck

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_backlog_quota_check(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def brokers_base_backlog_quota_check(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/backlog-quota-check")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {403, false},
      {500, false}
    ])
  end

  @doc """
  Delete dynamic ServiceConfiguration into metadata only. This operation requires Pulsar super-user privileges.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `config_name` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_delete_dynamic_configuration(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def brokers_base_delete_dynamic_configuration(connection, config_name, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/brokers/configuration/#{config_name}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {403, false},
      {412, false},
      {500, false}
    ])
  end

  @doc """
  Get the list of active brokers (broker ids) in the local cluster.If authorization is not enabled

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%String{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_get_active_brokers(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [String.t]} | {:error, Tesla.Env.t}
  def brokers_base_get_active_brokers(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Get the list of active brokers (broker ids) in the cluster.If authorization is not enabled, any cluster name is valid.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `cluster` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%String{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_get_active_brokers_0(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, [String.t]} | {:error, Tesla.Env.t}
  def brokers_base_get_active_brokers_0(connection, cluster, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/#{cluster}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {307, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get value of all dynamic configurations' value overridden on local config

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_get_all_dynamic_configurations(Tesla.Env.client, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def brokers_base_get_all_dynamic_configurations(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/configuration/values")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {403, false},
      {404, false},
      {500, false}
    ])
  end

  @doc """
  Get all updatable dynamic configurations's name

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%String{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_get_dynamic_configuration_name(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [String.t]} | {:error, Tesla.Env.t}
  def brokers_base_get_dynamic_configuration_name(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/configuration")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {403, false}
    ])
  end

  @doc """
  Get the internal configuration data

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PulsarAdmin.Model.InternalConfigurationData.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_get_internal_configuration_data(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.InternalConfigurationData.t} | {:error, Tesla.Env.t}
  def brokers_base_get_internal_configuration_data(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/internal-configuration")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.InternalConfigurationData},
      {403, false}
    ])
  end

  @doc """
  Get the information of the leader broker.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PulsarAdmin.Model.BrokerInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_get_leader_broker(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.BrokerInfo.t} | {:error, Tesla.Env.t}
  def brokers_base_get_leader_broker(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/leaderBroker")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.BrokerInfo},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get the list of namespaces served by the specific broker id

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `cluster_name` (String.t): 
  - `broker_id` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_get_owned_namespaces(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def brokers_base_get_owned_namespaces(connection, cluster_name, broker_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/#{cluster_name}/#{broker_id}/ownedNamespaces")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {307, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get all runtime configurations. This operation requires Pulsar super-user privileges.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_get_runtime_configuration(Tesla.Env.client, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def brokers_base_get_runtime_configuration(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/configuration/runtime")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {403, false}
    ])
  end

  @doc """
  Run a healthCheck against the broker

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:topicVersion` (String.t): Topic Version

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_health_check(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def brokers_base_health_check(connection, opts \\ []) do
    optional_params = %{
      :topicVersion => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/brokers/health")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {403, false},
      {404, false},
      {500, false}
    ])
  end

  @doc """
  Check if the broker is fully initialized

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_is_ready(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def brokers_base_is_ready(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/ready")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end

  @doc """
  Shutdown broker gracefully.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:maxConcurrentUnloadPerSec` (integer()): if the value absent(value=0) means no concurrent limitation.
    - `:forcedTerminateTopic` (boolean()): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_shut_down_broker_gracefully(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def brokers_base_shut_down_broker_gracefully(connection, opts \\ []) do
    optional_params = %{
      :maxConcurrentUnloadPerSec => :query,
      :forcedTerminateTopic => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/brokers/shutdown")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {403, false},
      {500, false}
    ])
  end

  @doc """
  Update dynamic serviceconfiguration into zk only. This operation requires Pulsar super-user privileges.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `config_name` (String.t): 
  - `config_value` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_update_dynamic_configuration(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def brokers_base_update_dynamic_configuration(connection, config_name, config_value, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/brokers/configuration/#{config_name}/#{config_value}")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {403, false},
      {404, false},
      {412, false},
      {500, false}
    ])
  end

  @doc """
  Get version of current broker

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec brokers_base_version(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def brokers_base_version(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/brokers/version")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {500, false}
    ])
  end
end
