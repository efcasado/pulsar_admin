# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule PulsarAdmin.Api.BrokerStats do
  @moduledoc """
  API calls for all endpoints tagged `BrokerStats`.
  """

  alias PulsarAdmin.Connection
  import PulsarAdmin.RequestBuilder

  @doc """
  Get the stats for the Netty allocator. Available allocators are 'default' and 'ml-cache'

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `allocator` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PulsarAdmin.Model.AllocatorStats.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec broker_stats_base_get_allocator_stats(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.AllocatorStats.t} | {:error, Tesla.Env.t}
  def broker_stats_base_get_allocator_stats(connection, allocator, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/broker-stats/allocator-stats/#{allocator}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.AllocatorStats},
      {403, false}
    ])
  end

  @doc """
  Get Load for this broker
  consists of topics stats & systemResourceUsage

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, PulsarAdmin.Model.LoadReport.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec broker_stats_base_get_load_report(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PulsarAdmin.Model.LoadReport.t} | {:error, Tesla.Env.t}
  def broker_stats_base_get_load_report(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/broker-stats/load-report")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.LoadReport},
      {403, false}
    ])
  end

  @doc """
  Get all the mbean details of this broker JVM

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Metrics{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec broker_stats_base_get_m_beans(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [PulsarAdmin.Model.Metrics.t]} | {:error, Tesla.Env.t}
  def broker_stats_base_get_m_beans(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/broker-stats/mbeans")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.Metrics},
      {403, false}
    ])
  end

  @doc """
  Gets the metrics for Monitoring
  Requested should be executed by Monitoring agent on each broker to fetch the metrics

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Metrics{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec broker_stats_base_get_metrics(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [PulsarAdmin.Model.Metrics.t]} | {:error, Tesla.Env.t}
  def broker_stats_base_get_metrics(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/broker-stats/metrics")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, PulsarAdmin.Model.Metrics},
      {403, false}
    ])
  end

  @doc """
  Get pending bookie client op stats by namespace
  Returns a nested map structure which Swagger does not fully support for display. Structure: Map<String, Map<String, PendingBookieOpsStats>>. Please refer to this structure for details.

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec broker_stats_base_get_pending_bookie_ops_stats(Tesla.Env.client, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def broker_stats_base_get_pending_bookie_ops_stats(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/broker-stats/bookieops")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {403, false}
    ])
  end

  @doc """
  Broker availability report
  This API gives the current broker availability in percent, each resource percentage usage is calculated and thensum of all of the resource usage percent is called broker-resource-availability<br/><br/>THIS API IS ONLY FOR USE BY TESTING FOR CONFIRMING NAMESPACE ALLOCATION ALGORITHM

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `tenant` (String.t): 
  - `namespace` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, %{}}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec broker_stats_get_broker_resource_availability(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def broker_stats_get_broker_resource_availability(connection, tenant, namespace, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/broker-stats/broker-resource-availability/#{tenant}/#{namespace}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {403, false},
      {409, false}
    ])
  end

  @doc """
  Get all the topic stats by namespace

  ### Parameters

  - `connection` (PulsarAdmin.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec broker_stats_get_topics2(Tesla.Env.client, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def broker_stats_get_topics2(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/broker-stats/topics")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {403, false}
    ])
  end
end
